import { ERRO } from "../../../common/zego.entity";
import { ZegoLogger } from "../../../common/zego.entity";
import { ZegoStreamCenterWeb } from "../zego.streamCenter.web";
declare type PreviewType = "camera" | "custom" | "screen";
export declare class ZegoPreview {
    logger: ZegoLogger;
    localStream: MediaStream | null;
    videoInfo: {
        width?: number;
        height?: number;
        frameRate?: number;
        bitRate?: number;
        startBitrate?: "default" | "target";
        audioBitrate?: number;
        channelCount?: number;
    };
    mediaStreamConfig: any;
    previewSuc: boolean;
    previewType?: PreviewType;
    soundLevel: number;
    script: ScriptProcessorNode | null;
    mic: any;
    ac: AudioContext;
    audioTrack: MediaStreamTrack | null;
    activeteSEIConfig: {
        action: 0 | 1;
        infoType: number;
    } | null;
    isAudioEnabled: boolean;
    gainNode: GainNode | null;
    streamCenter: ZegoStreamCenterWeb;
    constructor(log: ZegoLogger, audioContext: AudioContext, streamCenter: ZegoStreamCenterWeb, previewType?: PreviewType);
    get micTrack(): MediaStreamTrack | null;
    getMediaStreamConstraints(mediaStreamConfig: any, force?: boolean): any;
    startPreview(mediaStreamConfig: any, successCallback: Function, errorCallback: (err: ERRO) => void): void;
    captureStream(localVideo: any, mediaStreamConfig: any): MediaStream | null;
    stopPreview(): void;
    enableMicrophone: (enable: boolean, streamCenter: ZegoStreamCenterWeb) => boolean;
    enableMicrophoneOnly: (enable: boolean) => boolean;
    enableCamera: (enable: boolean, streamCenter: ZegoStreamCenterWeb, retain?: boolean | undefined) => boolean;
    startSoundLevel(): void;
    stopSoundLevel(): void;
    restartSoundLevel(): void;
}
export {};
