import { webPlayOption, ERRO, ENUM_BROADCASTER_STATUS, ZegoAudioContext } from "../../../common/zego.entity";
import { ZegoSignal } from "../streamSignal";
import { ZegoStreamCenterWeb } from "../zego.streamCenter.web";
import { StateCenter } from "../../../common/stateCenter";
import { ZegoLogger, ZegoDataReport } from "../../../common/zego.entity";
export declare class ZegoPlayWeb {
    logger: ZegoLogger;
    signal: ZegoSignal;
    state: number;
    streamCenter: ZegoStreamCenterWeb;
    candidateInfo: never[];
    qualityTimer: any;
    qualityTimeInterval: number;
    broadcasterStatus: ENUM_BROADCASTER_STATUS;
    playQualityList: never[];
    maxQualityListCount: number;
    lastPlayStats: any;
    dataReport: ZegoDataReport;
    reportSeq: number;
    streamReportSeq: any;
    videoSizeCallback: boolean;
    qualityUpload: boolean;
    qualityUploadInterval: number;
    qualityUploadLastTime: number;
    streamId: string;
    sessionId: number;
    sessionToken: string;
    sessionSeq: number;
    answerSeq: number;
    getRemoteStreamSuc: any;
    remoteStream: MediaStream | null;
    playStream: MediaStream | null;
    peerConnection: RTCPeerConnection | any;
    playOption: webPlayOption;
    closeSessionSignal: boolean;
    stateNego: number;
    negoTimer: any;
    negoInterval: number;
    cameraStatus: any;
    micStatus: any;
    playEvent: boolean;
    gotStreamStatus: boolean;
    streamStatus: any;
    stateCenter: StateCenter;
    ac: ZegoAudioContext;
    soundLevel: number;
    mic: any;
    script: any;
    beginTime: number;
    firstFrameTime: number;
    resourceMode: number;
    gwNode: string;
    gwNodeList: Array<string>;
    gwNodeTTL: number;
    isPeer: boolean;
    peerFailCount: number;
    isProbe: boolean;
    peerID: number;
    netQuality: number;
    probeTime: number;
    probeInterval: number;
    probeState: number;
    isRecvClientInfo: boolean;
    probeTimer: any;
    probeTimeoutInterval: number;
    /**音轨是否禁止 */
    audioMuteState: "0" | "1";
    /**视轨是否禁止 */
    videoMuteState: "0" | "1";
    constructor(log: ZegoLogger, signal: ZegoSignal | null, dataReport: ZegoDataReport, qualityTimeInterval: number, streamCenter: ZegoStreamCenterWeb, ac: ZegoAudioContext, stateCenter: StateCenter);
    startPlay(streamId: string, success: (stream: MediaStream) => void, playOption?: webPlayOption): void;
    private onCreatePlaySessionSuccess;
    private createOffer;
    private createSession;
    private handleCreateSessionResp;
    private handleCreateSessionWithSdpResp;
    private onCreateOfferSuccess;
    private onSetLocalDescriptionSuccess;
    private onRecvMediaDesc;
    private onGetRemoteOfferSuccess;
    private onRecvCandidateInfo;
    private onRecvPlayEvent;
    private onRecvClientInfo;
    private onRecvNetQualityInfo;
    private onIceCandidate;
    private onConnectionStateChange;
    private onIceConnectionStateChange;
    private checkPlayConnectionFailedState;
    private clearPlayQualityTimer;
    resetPlay(): void;
    private setPlayQualityTimer;
    private getPlayStats;
    private uploadPlayQuality;
    private onRecvResetSession;
    private onRecvCloseSession;
    private onRecvStreamStatus;
    private onGotRemoteStream;
    private sendCandidateInfo;
    shouldSendCloseSession(): boolean;
    private playStateUpdateError;
    private getCameraMicStatus;
    onPlayStateUpdate(type: number, streamId: string | null, error?: ERRO, stopRetry?: boolean): void;
    onPlayQualityUpdate(streamID: string, quality: any): void;
    onRemoteCameraStatusUpdate(streamID: string, status: string, initialStatus: number): void;
    onRemoteMicStatusUpdate(streamID: string, status: string, initialStatus: number): void;
    stopPlay(): void;
    onDisconnect(): void;
    startSoundLevel(): void;
    stopSoundLevel(): void;
    onCalNetQualityResult(result: number, netQuality?: number): void;
}
