import { StateCenter } from "../../../common/stateCenter";
import { ERRO } from "../../../common/zego.entity";
import { ZegoStreamCenterWeb } from "../zego.streamCenter.web";
import { ZegoLogger } from "../../../common/zego.entity";
import { RetryHandler } from "../../../util/retryHandler";
export declare class RetryStreamHandler extends RetryHandler {
    private logger;
    private stateCenter;
    private streamCenter;
    private isPublish;
    streamID: string;
    serverUrls: Array<string>;
    playStreamSuccess?: (stream: MediaStream) => void;
    constructor(logger: ZegoLogger, stateCenter: StateCenter, streamCenter: ZegoStreamCenterWeb, isPublish: boolean);
    initStream(streamID: string, serverUrls: Array<string>): void;
    activePublish(firstInterval?: number): boolean;
    activePull(firstInterval?: number, success?: (stream: MediaStream) => void): boolean;
    startMaxTime(): void;
    stopMaxTime(): void;
    onactive(...args: Array<any>): void;
    retryNextSignal(error: ERRO): boolean;
    publishStateHandle(type: number, streamID: string, error?: ERRO, stopRetry?: boolean): void;
    playStateHandle(type: number, streamID: string, error?: ERRO, stopRetry?: boolean): void;
}
