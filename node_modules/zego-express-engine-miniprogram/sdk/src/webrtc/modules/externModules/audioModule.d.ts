import { ZegoDataReport, ZegoLogger } from "../../../common/zego.entity";
import { StateCenter } from "../../../common/stateCenter";
import { ZegoStreamCenterWeb } from "../zego.streamCenter.web";
import { AudioMixConfig, ZegoAudioContext } from "../../../common/zego.entity";
export declare class AudioMixModule {
    private logger;
    private dataReport;
    private stateCenter;
    private streamCenter;
    private ac;
    buffer: AudioBuffer | null;
    blank: AudioBufferSourceNode | null;
    constructor(logger: ZegoLogger, dataReport: ZegoDataReport, stateCenter: StateCenter, streamCenter: ZegoStreamCenterWeb, ac: ZegoAudioContext);
    preloadEffect(id: string, effectUrl: string, callBack?: Function): void;
    playEffect(audioMixConfig: AudioMixConfig, start?: Function, end?: Function): void;
    pauseEffect(streamID: string, effectID?: string): boolean;
    resumeEffect(streamID: string, effectID?: string): boolean;
    stopEffect(streamID: string, effectID?: string): boolean;
    unloadEffect(effecId: string): boolean;
    setEffectVolume(streamID: string, volume: number, effectID?: string): boolean;
    startMixingAudio(streamID: string, audio: Array<HTMLMediaElement>): boolean;
    stopMixingAudio(streamID: string, audio?: Array<HTMLMediaElement>): boolean;
    mixingBuffer(streamID: string, sourceID: string, arrayBuffer: ArrayBuffer, callBack?: Function): void;
    stopMixingBuffer(streamID: string, sourceID: string): boolean;
    setMixingAudioVolume(streamID: string, volume: number, audio: HTMLMediaElement): boolean;
    getSoundLevel(localStream: MediaStream, sucCallBack: Function, errCallBack: Function): void;
    private _preloadEffect;
    private _playEffect;
    private _pauseEffect;
    private _resumeEffect;
    private _stopEffect;
    private _setMixingAudioVolume;
    private _startMixingAudio;
    private _stopMixingAudio;
    private _mixingBuffer;
    private _stopMixingBuffer;
}
