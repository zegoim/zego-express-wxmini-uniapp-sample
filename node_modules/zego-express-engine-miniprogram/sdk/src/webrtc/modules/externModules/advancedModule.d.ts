import { CdnPushConfig, ZegoDataReport, ZegoLogger } from "../../../common/zego.entity";
import { PublishStreamConstraints, ZegoResponse } from "../../../common/zego.entity";
import { ZegoStreamCenterWeb } from "../zego.streamCenter.web";
import { StateCenter } from "../../../common/stateCenter";
export declare class AdvancedModule {
    private logger;
    private dataReport;
    private streamCenter;
    private stateCenter;
    screenShotReady: boolean;
    constructor(logger: ZegoLogger, dataReport: ZegoDataReport, streamCenter: ZegoStreamCenterWeb, stateCenter: StateCenter);
    setVideoConfig(localStream: MediaStream, constraints: PublishStreamConstraints): Promise<{
        errorCode: number;
        extendedData: string;
    }>;
    setAudioConfig(localStream: MediaStream, constraints: PublishStreamConstraints): Promise<{
        errorCode: number;
        extendedData: string;
    }>;
    enableStream(localStream: MediaStream, option: {
        video?: boolean;
        audio?: boolean;
        retain?: boolean;
    }): boolean;
    enableMicrophoneOnly(enable: boolean): boolean;
    replaceTrack(localStream: MediaStream, mediaStreamTrack: MediaStreamTrack): Promise<{
        errorCode: number;
        extendedData: string;
    }>;
    setPublishStreamConstraints(stream: MediaStream, constraints: PublishStreamConstraints, success?: (result: ZegoResponse) => void): void;
    useVideoDevice(localStream: MediaStream, deviceID: string): Promise<ZegoResponse>;
    useAudioDevice(localStream: MediaStream, deviceID: string): Promise<ZegoResponse>;
    publishTarget(cdnPushConfig: CdnPushConfig): Promise<ZegoResponse>;
    private switchDevice;
    private _replaceTrack;
    private enableMicrophone;
    private enableCamera;
}
