import { ZegoDataReport, ZegoLogger, ZegoRoomInfo } from "../../common/zego.entity";
import { StateCenter } from "../../common/stateCenter";
import { ZegoStreamCenter } from "../../common/streamCenter";
import { ERRO } from "../../common/zego.entity";
import { ZegoPlayWechat } from "./zego.play.wechat";
import { LivePusher } from "./pusher";
import { LivePlayer } from "./player";
export declare class ZegoStreamCenterWechat extends ZegoStreamCenter {
    dataReport: ZegoDataReport;
    /***
     * 拉流端播放器
     */
    playerList: {
        [index: string]: ZegoPlayWechat;
    };
    /**
     * 推流端播放器
     */
    publisherList: {
        [index: string]: ZegoPlayWechat;
    };
    playerCount: number;
    logger: ZegoLogger;
    playingList: any;
    publishingList: any;
    eventSeq: number;
    streamEventMap: any;
    streamReportMap: any;
    stateCenter: StateCenter;
    pusherInstance?: LivePusher;
    livePlayerList: Array<LivePlayer>;
    playerContextMap: {
        [index: string]: any;
    };
    publishSuccessCallBackList: {
        [index: string]: Function;
    };
    publishErrorCallBackList: {
        [index: string]: Function;
    };
    playSuccessCallBackList: {
        [index: string]: Function;
    };
    playErrorCallBackList: {
        [index: string]: Function;
    };
    constructor(log: ZegoLogger, stateCenter: StateCenter, dataReport: ZegoDataReport);
    updatePlayingState(streamId: string, streamParams?: any, start?: boolean): boolean;
    updatePublishingState(room: ZegoRoomInfo, streamId: string, streamParams?: string, start?: boolean): boolean;
    updateAudioVolumeNotify(streamID: string, event: any): void;
    updateStreamState(streamID: string, start: boolean, streamParams: string, streamList: Array<{
        streamID: string;
        params: string;
    }>): void;
    isPlaying(): boolean;
    isPublishing(): boolean;
    startPlayingStream(streamId: string, streamUrlList: string[], dispatchType?: number): boolean;
    /**
     * 启用推流端或拉流端播放器
     * @param streamID
     * @param streamUrlList
     * @param dispatchType
     * @param playerType 0为拉流 1为推流
     * @returns
     */
    startPlayer(streamID: string, streamUrlList: string[], dispatchType: number, playerType: number): boolean;
    /**
     * "zpc.gnu"
     * @param streamID
     */
    getNextUrl(streamID: string): string;
    stopPlayingStream(streamId: string | undefined): void;
    stopPlayer(streamId: string | number): void;
    startPublishingStream(streamID: string, streamUrlList: string[], dispatchType?: number): boolean;
    stopPublishingStream(streamId: string | undefined): void;
    updatePlayerState(streamId: string, event: any): void;
    updatePlayerNetStatus(streamId: string, event: any): void;
    reset(roomID: string): void;
    reportPublishEvent(streamId: string, error?: any): void;
    reportPlayEvent(streamId: string, error?: any): void;
    onPlayStateUpdate(type: number, streamId: string, error: ERRO): void;
    onPlayQualityUpdate(streamID: string, streamQuality: any): void;
    onPublishStateUpdate(type: number, streamId: string, error: {
        code: string | number;
        message: string;
    } | undefined): void;
    onPublishQualityUpdate(streamId: string, streamQuality: any): void;
    onPublisherStreamUrlUpdate(streamId: any, url: any): void;
    onPublisherStreamUrlFail(streamID: string, error: ERRO): void;
    onPlayerStreamUrlUpdate(streamId: any, url: any): void;
    getReconnectLimit(sourceType: number): number;
    onPlayerStart(streamId: string, playerType: number): void;
    onPlayerStop(streamId: string, playerType: number, error: any): void;
    onPlayerRetry(streamId: string, playerType: number): void;
    onPlayerQuality(streamID: string, streamQuality: {
        videoBitrate: any;
        audioBitrate: any;
        videoFPS: any;
        videoHeight: any;
        videoWidth: any;
    }, playerType: number): void;
    onStreamUrlUpdate(streamId: string, url: string, playerType: number): void;
    getTotalStreamId(streamid: string): string;
    getRealStreamId(streamid: string): string;
    getRoomByStreamID(streamID: string): ZegoRoomInfo | undefined;
}
