import { ZegoStreamCenterWechat } from "./zego.streamcenter.wechat";
import { ZegoDataReport, ZegoLogger, ZegoRoomInfo } from "../../common/zego.entity";
import { StateCenter } from "../../common/stateCenter";
export declare class ZegoPlayWechat {
    private logger;
    private streamId;
    private streamCenter;
    private dataReport;
    private stateCenter;
    room: ZegoRoomInfo;
    urls: string[];
    tryUrls: string[];
    playUrlIndex: number;
    playUrlTryCount: number;
    currentUrl: string | null;
    retryIndex: number;
    reconnectCount: number;
    state: number;
    reconnectLimit: number;
    sourceType: number;
    playerType: number;
    params: any;
    playerSeq: number;
    playerReportSeq: number;
    publishQualitySeq: number;
    publishQualityCount: number;
    publishQulaityMaxCount: number;
    playQualitySeq: number;
    playQualityCount: number;
    playQulaityMaxCount: number;
    everSuccess: boolean;
    pushBegin: boolean;
    playBegin: boolean;
    playerInfo: any;
    playerLogUploadTime: number;
    seq: number;
    dispatchType: number;
    constructor(logger: ZegoLogger, streamId: string, streamCenter: ZegoStreamCenterWechat, dataReport: ZegoDataReport, stateCenter: StateCenter, room: ZegoRoomInfo);
    resetPlayer(): void;
    newPlayer(): boolean;
    stopPlayer(): void;
    tryStartPlayer(errorCode: any): void;
    getPlayerUrl(): string;
    shouldRetryPlay(event: {
        detail: {
            code: any;
        };
    }): boolean;
    isPlayFailed(event: {
        detail: {
            code: any;
        };
    }): boolean;
    shouldRetryPublish(event: {
        detail: {
            code: any;
        };
    }): boolean;
    isPublishFailed(event: {
        detail: {
            code: any;
        };
    }): boolean;
    updateEvent(event: {
        detail: any;
    }): void;
    updatePlayerNetStatus(event: {
        detail: {
            info: {
                videoBitrate: any;
                audioBitrate: any;
                videoFPS: any;
                videoHeight: any;
                videoWidth: any;
                videoGOP: any;
                netSpeed: any;
                netJitter: any;
            };
        };
    }): void;
    getCurrentPlayerUrl(): string;
    reportQualityStatics(this: any): void;
    reportPlayQualityStatics(this: any): void;
    handlePublisherSuccess(): void;
}
