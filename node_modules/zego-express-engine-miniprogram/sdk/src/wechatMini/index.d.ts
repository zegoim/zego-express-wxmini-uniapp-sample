import { StateCenter } from "../common/stateCenter";
import { MixStreamAdvance, MixStreamConfig, PlayerAttributes, PusherAttributes, WxListener, wxPublishOption, ZegoDataReport, ZegoExpressWebRTM, ZegoLogger, ZegoResponse } from "../common/zego.entity";
import { WechatMiniModules } from "./modules";
import { LivePusher } from "./modules/pusher";
import { LivePlayer } from "./modules/player";
export declare class ZegoWechatMini {
    logger: ZegoLogger;
    private dataReport;
    private rtm;
    stateCenter: StateCenter;
    wechatMiniModules: WechatMiniModules;
    wxContext?: any;
    pushAtr?: string;
    playAtr?: string;
    constructor(logger: ZegoLogger, dataReport: ZegoDataReport, rtm: ZegoExpressWebRTM, ENV?: number);
    checkSystemRequirements(): Promise<{
        code: number;
        msg: string;
    }>;
    getVersion(): string;
    on<k extends keyof WxListener>(event: k, callBack: WxListener[k]): boolean;
    off<k extends keyof WxListener>(event: k, callBack?: WxListener[k]): boolean;
    startPublishingStream(streamID: string, publishOption?: wxPublishOption): Promise<{
        streamID: string;
        url: string;
    }>;
    stopPublishingStream(streamID: string): boolean;
    getNextUrl(streamID: string): string;
    setCustomSignalUrl(signalUrl: Array<string>, isPublish?: boolean): boolean;
    addPublishCdnUrl(streamID: string, targetURL: string): Promise<{
        errorCode: number;
        extendedData: string;
    }>;
    removePublishCdnUrl(streamID: string, targetURL: string): Promise<{
        errorCode: number;
        extendedData: string;
    }>;
    startMixerTask(mixStreamConfig: MixStreamConfig): Promise<{
        errorCode: number;
        extendedData: string;
    }>;
    setMixerTaskConfig(config: MixStreamAdvance): Promise<{
        errorCode: number;
        extendedData: string;
    }>;
    stopMixerTask(taskId: string): Promise<{
        errorCode: number;
        extendedData: string;
    }>;
    setStreamExtraInfo(streamID: string, extraInfo: string): Promise<ZegoResponse>;
    startPlayingStream(streamID: string, playOption?: {
        streamParams?: string;
        isMix?: boolean;
        sourceType?: "CDN" | "BGP";
    }): Promise<{
        streamID: string;
        url: string;
    }>;
    stopPlayingStream(streamID: string): void;
    updatePlayerState(streamID: string, event: any): void;
    updatePlayerNetStatus(streamID: string, event: any): void;
    updateAudioVolumeNotify(streamID: string, event: any): void;
    initContext(obj: {
        wxContext?: any;
        pushAtr?: string;
        playAtr?: string;
    }): void;
    createPusher(config?: any): LivePusher | null;
    setPusherAttributes(options: PusherAttributes, callBack?: Function): void;
    setPlayerAttributes(streamID: string, config: PlayerAttributes, callBack?: Function): void;
    getPusherInstance(): LivePusher | null;
    getPlayerInstance(streamID: string, wxContext?: any): LivePlayer | null;
    getPlayerList(streamID?: string): Array<LivePlayer["attributes"]>;
    mutePublishStreamVideo(bool: boolean): void;
    mutePublishStreamAudio(bool: boolean): void;
    mutePlayStreamVideo(streamID: string, bool: boolean): void;
    mutePlayStreamAudio(streamID: string, bool: boolean): void;
    setPlayData(callBack?: Function): void;
}
