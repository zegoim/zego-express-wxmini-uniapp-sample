import { ZegoLogger, ZegoRoomInfo } from "../common/zego.entity";
import { MixStreamAdvance, ENUM_NETWORK_STATE, ZegoDataReport } from "./zego.entity";
export declare class StateCenter {
    private logger;
    private dataReport;
    debug: boolean;
    testEnvironment: boolean;
    pullLimited: boolean;
    configOK: boolean;
    appid: number;
    userid: string;
    bizVersion: string;
    relateService: Array<string>;
    role: 1 | 2;
    server: string;
    serverBak: string;
    idName: string;
    nickName: string;
    userStateUpdate: boolean;
    maxMemberCount: number;
    roomCreateFlag: number;
    callbackList: {
        [index: string]: Function;
    };
    publishStreamList: any;
    streamUrlMap: any;
    cmdCallback: any;
    customUrl: any;
    customPlayUrl: any;
    screenShotStream: MediaStream;
    turnOverTcpOnly: boolean;
    customSetTcpOrUdp: boolean;
    supportUdp: boolean;
    audioEffectBuffer: any;
    audioBitRate: number;
    cdnSeq: number;
    listenerList: {
        [index: string]: Array<Function>;
    };
    reportList: {
        [index: string]: Function;
    };
    reportSeqList: {
        startPublish: {
            [index: string]: number;
        };
        rePublish: {
            [index: string]: number;
        };
        startPlay: {
            [index: string]: number;
        };
        rePlay: {
            [index: string]: number;
        };
        stopPublish: {
            [index: string]: number;
        };
        stopPlay: {
            [index: string]: number;
        };
    };
    clientType: string | undefined;
    streamTrigger: any;
    mixStreamAdvance: MixStreamAdvance;
    audioStreamList: {
        [index: string]: {
            mic: MediaStreamAudioSourceNode;
            script: ScriptProcessorNode;
        };
    };
    deviceInfos: any;
    deviceChangeTimer: any;
    deviceStateOut: boolean;
    networkState: ENUM_NETWORK_STATE;
    streamRetryTime: number;
    checkList: string[];
    anchor_info: {
        anchor_id: string;
        anchor_id_name: string;
        anchor_nick_name: string;
    };
    streamConnectTime: number;
    clientIP: string;
    type: "PUBLIC" | "PRIVATE";
    roomList: Array<ZegoRoomInfo>;
    isMultiRoom: boolean;
    constructor(logger: ZegoLogger, dataReport: ZegoDataReport);
    getRequestId(): string;
    getSignalCmdContent(roomID: string, requestId: string, dest_id_name: string, result?: number): string;
    actionListener(listener: string, ...args: Array<any>): void;
    getRoomByRoomID(roomID: string): ZegoRoomInfo | undefined;
    getPlayRoom(streamID: string): ZegoRoomInfo | undefined;
}
